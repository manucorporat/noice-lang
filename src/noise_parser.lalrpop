use std::str::FromStr;
use ast::{Expr, Opcode};

grammar;

pub Unit: Box<Expr> = Statements;

Block: Box<Expr> = "{" <Statements> "}";

Statements: Box<Expr> = {
    <FullStatement*> => Box::new(Expr::List(Vec::from(<>))),
};

FullStatement: Box<Expr> = <Statement> ";";

Statement: Box<Expr> = {
    Expr,
    Assign,
};

Expr: Box<Expr> = {
    MathExpr,
    Factor,
    Block,
};

Assign: Box<Expr> = {
    Identifier AssignOp Expr => Box::new(Expr::Assign(<>)),
};

AssignOp: Opcode = {
    "~" => Opcode::Ref,
    "=" => Opcode::Assign,
};

MathExpr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp SubExpr => Box::new(Expr::Op(<>)),
    SubExpr,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

SubExpr: Box<Expr> = {
    Literal,
    "(" <Expr> ")",
    // FnCall,
};

// FnCall: Box<Expr> = {
//     <Identifier> "(" ")",
// };

Literal: Box<Expr> = {
    Num,
    Text,
    Identifier => Box::new(Expr::Id(<>)),
};

Num: Box<Expr> = {
    r"[0-9]+" => Box::new(Expr::Number(f64::from_str(<>).unwrap())),
};

Text: Box<Expr> = {
    r"\x22[^\x22]*\x22" => Box::new(Expr::Text(<>.to_string())),
};

Identifier: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>.to_string(),
};
