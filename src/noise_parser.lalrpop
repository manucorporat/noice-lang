use std::str::FromStr;
use ast::{Expr, Opcode, Unit};

grammar;


pub Unit: Unit = {
    <Expr*> => Unit::new(Vec::from(<>)),
};

Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};


ExprOp: Opcode = {
    "=" => Opcode::Assign,
    "~" => Opcode::Ref,
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};


Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Identifier => Box::new(Expr::Id(<>)),
    "(" <Expr> ")"
};

Num: f64 = {
    r"[0-9]+" => f64::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z_]+" => String::from_str(<>).unwrap()
};
